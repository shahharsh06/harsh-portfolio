name: Update Dashboard (Manual Only)

on:
  # Disabled automatic triggers to prevent infinite loops
  # workflow_run:
  #   workflows: ["CI/CD Pipeline", "Deploy to GitHub Pages"]
  #   types: [completed]
  workflow_dispatch:

jobs:
  update-dashboard:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests and generate coverage
        run: npx vitest run --coverage

      - name: Generate Vitest JSON report
        run: npx vitest run --reporter=json --outputFile=vitest-report.json

      - name: Generate dashboard data
        run: node scripts/coverage-summary.js

      # Optionally update dashboard.html if you want to inject metrics directly
      # - name: Update dashboard HTML (optional)
      #   run: |
      #     # Example: sed or node script to inject values from dashboard-data.json
      #     # This step can be customized as needed

      - name: Check latest CI status
        id: ci-status
        run: |
          gh run list --workflow="CI/CD Pipeline" --limit 1 --json conclusion -q '.[0].conclusion' > ci_status.txt
          CI_STATUS=$(cat ci_status.txt)
          if [ "$CI_STATUS" = "success" ]; then
            CI_RESULT="success"
          else
            CI_RESULT="failed"
          fi
          jq --arg status "$CI_RESULT" '.workflows.ci = $status' public/dashboard-data.json > tmp.json && mv tmp.json public/dashboard-data.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check latest Deploy status
        id: deploy-status
        run: |
          gh run list --workflow="Deploy to GitHub Pages" --limit 1 --json conclusion -q '.[0].conclusion' > deploy_status.txt
          DEPLOY_STATUS=$(cat deploy_status.txt)
          if [ "$DEPLOY_STATUS" = "success" ]; then
            DEPLOY_RESULT="success"
          else
            DEPLOY_RESULT="failed"
          fi
          jq --arg status "$DEPLOY_RESULT" '.workflows.deploy = $status' public/dashboard-data.json > tmp.json && mv tmp.json public/dashboard-data.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and push dashboard updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add public/dashboard-data.json
          git commit -m "dashboard: update metrics [ci skip]" || echo "No changes to commit"
          git push

      - name: Create dashboard summary
        run: |
          echo "## ðŸ“Š Dashboard Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Coverage**: $(jq .coverage.percentage public/dashboard-data.json)%" >> $GITHUB_STEP_SUMMARY
          echo "**Function Coverage**: $(jq .functions.percentage public/dashboard-data.json)%" >> $GITHUB_STEP_SUMMARY
          echo "**Tests**: $(jq .tests.count public/dashboard-data.json) passing" >> $GITHUB_STEP_SUMMARY
          echo "**Test Files**: $(jq .tests.files public/dashboard-data.json)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Dashboard available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dashboard.html" >> $GITHUB_STEP_SUMMARY 