name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Run Vitest and generate JSON report
        run: npx vitest run --reporter=json --outputFile=vitest-report.json

      - name: Generate dashboard data
        run: node scripts/coverage-summary.js

      - name: Upload coverage to Qlty Cloud
        uses: qltysh/qlty-action/coverage@v1
        with:
          token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
          files: coverage/lcov.info

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

      - name: Upload dashboard data
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-data
          path: public/dashboard-data.json
          retention-days: 30

      - name: Comment PR with coverage summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coveragePath = './coverage/lcov.info';
            
            if (fs.existsSync(coveragePath)) {
              const lcov = fs.readFileSync(coveragePath, 'utf8');
              const lines = lcov.split('\n');
              let totalLines = 0;
              let coveredLines = 0;
              
              lines.forEach(line => {
                if (line.startsWith('LF:')) {
                  totalLines += parseInt(line.split(':')[1]);
                } else if (line.startsWith('LH:')) {
                  coveredLines += parseInt(line.split(':')[1]);
                }
              });
              
              const coverage = totalLines > 0 ? Math.round((coveredLines / totalLines) * 100) : 0;
              
              // Count test files
              const testFiles = fs.readdirSync('./src', { recursive: true })
                .filter(file => file.includes('.test.') || file.includes('.spec.'))
                .length;
              
              const comment = `## ðŸ“Š Test Coverage Report
              
              **Coverage**: ${coverage}%
              **Covered Lines**: ${coveredLines}
              **Total Lines**: ${totalLines}
              **Test Files**: ${testFiles}
              
              Coverage reports are available as artifacts.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download dashboard data
        uses: actions/download-artifact@v4
        with:
          name: dashboard-data
          path: public/

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7 